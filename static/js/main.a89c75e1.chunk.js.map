{"version":3,"sources":["Components/TodoItem.js","Components/TodoHeader.js","Actions/actions.js","Components/TodoFooter.js","Components/TodoList.js","Components/App.js","Reducers/reducer.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoHeader","state","handleChange","event","_this","setState","target","value","handleAddTodo","addTodo","keyCode","placeholder","autoFocus","onChange","onKeyDown","connect","dispatch","payload","TodoFooter","console","log","filter","clearCompletedTodos","Link","to","todos","todoList","TodoList","Fragment","Components_TodoHeader","map","todo","Components_TodoItem","key","id","Components_TodoFooter","handleDestroyAllCompletedTodos","location","pathname","App","clickedTodoId","toggleTodo","deleteTodo","allHandlingProps","length","Switch","Route","exact","path","render","Components_TodoList","Object","assign","route","initialState","todosReducer","arguments","undefined","action","newlyEnteredTodo","userId","Math","floor","random","objectSpread","toConsumableArray","concat","newTodosMinusCompleted","newTodosMinusOne","newTodosWithToggles","store","createStore","ReactDOM","BrowserRouter","basename","process","es","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a89c75e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, deleteTodo, toggleTodo } from \"../Actions/actions\"\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\n// // put the title stuff?\n// const mapStateToProps = (state) => {\n//     return {\n//         // title\n//     }\n// };\n// // put the rest\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         // clearCompletedTodos: () => dispatch(clearCompletedTodos())\n//     }\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(TodoItem)\nexport default TodoItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from \"../Actions/actions\"\n\nclass TodoHeader extends Component {\n    state = {\n        title: \"\"\n    };\n\n    handleChange = event => {\n        this.setState({\n            title: event.target.value\n        })\n    };\n\n    // need to ahndle something with dom, so keep this\n    // because \"editting\" or w/e cause of state, not \"reading\", inside the heder, have null for mSTP; info getting dispatched is w/e you enter \n    handleAddTodo = event => {\n        const { addTodo } = this.props;\n        const { title } = this.state;\n        if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n            addTodo(title);\n            this.setState({ title: \"\" });\n        };\n    };\n\n    render() {\n        const { title } = this.state;\n        return (\n            <header className=\"header\">\n                <h1>todos</h1>\n                <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onChange={this.handleChange} onKeyDown={this.handleAddTodo} value={title} />\n                {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n            </header>\n        );\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: title => dispatch(addTodo(title))\n    }\n};\nexport default connect(null, mapDispatchToProps)(TodoHeader);\n// export default TodoHeader;","// action type constants = dont have to mistype string (vs code doesnt know if it is)\n// the exports are named (when expoted, can only import if spelled the same)\nexport const ADD_TODO = \"ADD_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n\n// action creators; make action objs (always have type prop, which si what reducerswitch is on); fetch reqs will end up going inside (would go before the second{}); defines what will happen\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        payload: title\n    }\n};\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS,\n        // payload: id\n    }\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id\n    }\n};\n\nexport const toggleTodo = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        // what makes actioncreater happen; reducer (in other file) will transform data\n        payload: id\n    }\n};\n// export const toggleTodo = (id) => ({\n//     type: TOGGLE_TODO,\n//     payload: id\n// })","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { clearCompletedTodos } from \"../Actions/actions\" \n\nclass TodoFooter extends Component {\n    render() {\n        console.log(this.props.filter)\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { completed, clearCompletedTodos, filter } = this.props;\n        return (\n            <footer className=\"footer\">\n                {/* should be 0 default; change to {completed} */}\n                <span className=\"todo-count\"><strong>{completed}</strong> item(s) left</span>\n                <ul className=\"filters\">\n                    {/* if do NavLink, add in activeClassName=\"selected\" and add exact to each, or if have the switch, just put with / in route; or classname={filter === \"all\"?\"seected\":\"\"} */}\n                    <li><Link to=\"/\" className={filter === \"/\" ? \"selected\" : \"\"}>All</Link></li>\n                    <li><Link to=\"/active\" className={filter === \"/active\" ? \"selected\" : \"\"}>Active</Link></li>\n                    <li><Link to=\"/completed\" className={filter === \"/completed\" ? \"selected\" : \"\"}>Completed</Link></li>\n                </ul>\n                <button className=\"clear-completed\" onClick={clearCompletedTodos}>Clear completed</button>\n            </footer>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        // there is a todos prop on state\n        todos: state.todoList\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // call actionCreater() and dispatch it to the redux reducer; could alwayes just write as cCT() as long as named as same thing as prop in comp above and put in {} inside connect\n        clearCompletedTodos: () => dispatch(clearCompletedTodos())\n        // clearCompletedTodos: (id) => dispatch(clearCompletedTodos(id))\n    }\n};\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);\n// export default TodoFooter;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TodoItem from \"./TodoItem.js\";\n// import todoList from '../todos.json';\nimport TodoHeader from './TodoHeader.js';\nimport TodoFooter from './TodoFooter.js';\n\nclass TodoList extends Component {\n    render() {\n        const { todos, handleAddTodo } = this.props;\n        return (\n            // react.fragment is used when there are multpile big tag things\n            <React.Fragment>\n                <TodoHeader handleAddTodo={handleAddTodo}/>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.props.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.props.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                <TodoFooter completed={this.props.completed} handleDestroyAllCompletedTodos={this.props.handleDestroyAllCompletedTodos} filter={this.props.location.pathname}/>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\nimport { Switch, Route } from \"react-router-dom\";\nimport todoList from '../todos.json';\nimport { connect } from 'react-redux';\nimport { deleteTodo, toggleTodo } from \"../Actions/actions\"\n\nclass App extends Component {\n  // wont need state b/c redux will have the state stuff \n\n  handleToggleCompletedTodo = clickedTodoId => event => {\n    this.props.toggleTodo(clickedTodoId)\n  };\n  // will lose these handlers b/c just data and not doing stuffon dom\n  handleDestroyOne = clickedTodoId => event => {\n    this.props.deleteTodo(clickedTodoId);\n  };\n\n  render() {\n    // console.log(this.props.pathname)\n    const { todos } = this.props;\n    const allHandlingProps = {\n      // handleAddTodo: this.handleAddTodo,\n      handleDestroyOne: this.handleDestroyOne,\n      handleToggleCompletedTodo: this.handleToggleCompletedTodo,\n      // handleDestroyAllCompletedTodos: this.handleDestroyAllCompletedTodos,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route exact path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} route=\"active\"/>} />\n          <Route exact path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} route=\"completed\"/>} />\n          <Route exact path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} route=\"/\"/>} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\n// cut out all ofr the state stuff above b/c state will be handled by redux \n// this state is entire redux state\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todoList\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteTodo: id => dispatch(deleteTodo(id)),\n    toggleTodo: id => dispatch(toggleTodo(id))\n  }\n}\n\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n// export default App;","import { ADD_TODO, CLEAR_COMPLETED_TODOS, DELETE_TODO, TOGGLE_TODO } from \"../Actions/actions.js\";\nimport todoList from '../todos.json'; // this will get the collection of all the messages and can put in the inital state\n\nconst initialState = {\n    todoList\n};\n\nconst todosReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            let makeId = Math.floor(Math.random() * 333666999);\n            let newlyEnteredTodo = {\n                userId: 1,\n                id: makeId,\n                title: action.payload,\n                completed: false\n            };\n            // wont be an array because this has to deal with wha the initial sate already looks like \n            return {\n                ...state,\n                todoList: [...state.todoList, newlyEnteredTodo]\n            };\n        case CLEAR_COMPLETED_TODOS:\n            const newTodosMinusCompleted = state.todoList.filter(todo => !todo.completed)\n            console.log(\"test \")\n            return {\n                ...state,\n                todoList: newTodosMinusCompleted\n            };\n        case DELETE_TODO:\n            const newTodosMinusOne = state.todoList.filter(todo => {\n                if (todo.id === action.payload) {\n                    return false\n                }\n                return true;\n            });\n            return {\n                ...state,\n                todoList: newTodosMinusOne\n            };\n        case TOGGLE_TODO:\n            const newTodosWithToggles = state.todoList.map(todo => {\n                if (todo.id === action.payload) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            });\n            return {\n                ...state,\n                todoList: newTodosWithToggles\n            };\n        default:\n            return state;\n    }\n};\n\nexport default todosReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport './index.css';\nimport App from './Components/App';\nimport todosReducer from \"./Reducers/reducer.js\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nlet store = createStore(todosReducer);\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        {/* comp that procides access to connect for any subcomp to be able to access redux store */}\n        <Provider store={store}>\n            <Route render={(props) => <App pathname={props.location.pathname}/>}>\n            </Route>\n        </Provider>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));\n// first param has to be component"],"sourceRoot":""}