{"version":3,"sources":["Components/TodoItem.js","Components/TodoHeader.js","Components/TodoFooter.js","Actions/actions.js","Components/TodoList.js","Components/App.js","Reducers/reducer.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoHeader","handleAddTodo","placeholder","autoFocus","onKeyDown","TodoFooter","handleDestroyAllCompletedTodos","NavLink","exact","to","activeClassName","connect","state","todos","filter","todo","length","dispatch","clearCompletedTodos","TodoList","todoList","_this2","Fragment","Components_TodoHeader","map","Components_TodoItem","key","id","Components_TodoFooter","App","clickedTodoId","event","newTodos","_this","setState","makeId","Math","floor","random","keyCode","slice","newlyEnteredTodo","userId","target","value","push","allHandlingProps","Switch","Route","path","render","Components_TodoList","Object","assign","initialState","todosReducer","arguments","undefined","action","toConsumableArray","concat","store","createStore","ReactDOM","BrowserRouter","basename","process","es","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.552724ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\n\nclass TodoHeader extends Component {\n    render() {\n        const { handleAddTodo } = this.props;\n        return (\n            <header className=\"header\">\n                <h1>todos</h1>\n                <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onKeyDown={handleAddTodo} />\n                {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n            </header>\n        );\n    };\n};\n\nexport default TodoHeader;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from 'net';\nimport {clearCompletedTodos} from \"../Actions/actions\" // if it's called index.js, you dont need to add it \n\nclass TodoFooter extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { completed, handleDestroyAllCompletedTodos } = this.props;\n        return (\n            <footer className=\"footer\">\n                {/* should be 0 default; change to {completed} */}\n                <span className=\"todo-count\"><strong>{completed}</strong> item(s) left</span>\n                <ul className=\"filters\">\n                    {/* if do NavLink, add in activeClassName=\"selected\" and add exact to each, or if have the switch, just put with / in route; or classname={filter === \"all\"?\"seected\":\"\"} */}\n                    <li><NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink></li>\n                    <li><NavLink exact to=\"/active\" activeClassName=\"selected\">Active</NavLink></li>\n                    <li><NavLink exact to=\"/completed\" activeClassName=\"selected\">Completed</NavLink></li>\n                </ul>\n                <button className=\"clear-completed\" onClick={handleDestroyAllCompletedTodos}>Clear completed</button>\n            </footer>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        // there is a todos prop on state\n        completed: state.todos.filter(todo => !todo.completed).length\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // call actionCreater() and dispatch it to the redux reducer; could alwayes just write as cCT() as long as named as same thing as prop in comp above and put in {} inside connect\n        clearCompletedTodos: () => dispatch(clearCompletedTodos())\n    }\n}\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter)\n// export default TodoFooter;","// action type constants = dont have to mistype string (vs code doesnt know if it is)\n// the exports are named (when expoted, can only import if spelled the same)\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\n\n// action creators; make action objs (always have type prop, which si what reducerswitch is on); fetch reqs will end up going inside (would go before the second{}); defines what will happen\nexport const toggleTodo = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        // what makes actioncreater happen; reducer (in other file) will transform data\n        payload: id\n    }\n};\n// export const toggleTodo = (id) => ({\n//     type: TOGGLE_TODO,\n//     payload: id\n// })\n\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        payload: title\n    }\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id\n    }\n};\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    }\n};","import React, { Component } from 'react';\n// import queryString from \"query-string\";\nimport TodoItem from \"./TodoItem.js\";\nimport todoList from '../todos.json';\nimport TodoHeader from './TodoHeader.js';\nimport TodoFooter from './TodoFooter.js';\n\nclass TodoList extends Component {\n    state = {\n        todos: todoList\n    };    \n    render() {\n        const { todos, handleAddTodo } = this.props;\n        return (\n            // react.fragment is used when there are multpile big tag things\n            <React.Fragment>\n                <TodoHeader handleAddTodo={handleAddTodo}/>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.props.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.props.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                <TodoFooter completed={this.props.completed} handleDestroyAllCompletedTodos={this.props.handleDestroyAllCompletedTodos}/>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\nimport { Switch, Route } from \"react-router-dom\";\nimport todoList from '../todos.json';\nimport { connect } from 'net';\nimport {  } from \"../Actions/actions\" // if it's called index.js, you dont need to add it \n\nclass App extends Component {\n  state = {\n    todos: todoList\n  };\n\n  // function inside funciton; once called the first time, the first outer funxtion will run and implicitly returns inner function (the event handler); first param is event obj sent from dom; cTI can be accessed inside inner funct\n  handleToggleCompletedTodo = clickedTodoId => event => {\n    // map makes new array to get results in newtodos\n    const newTodos = this.state.todos.map(todo => {\n      // get todo id that matches one was clicked; if this is false, no run\n      if (todo.id === clickedTodoId) {\n        // change completed value/any boolean value (t vs f)\n        todo.completed = !todo.completed;\n      }\n      return todo; // have to return original todo obj\n    });\n    // overwrite todos w/ newtodos\n    this.setState({ todos: newTodos });\n  };\n\n  // need to ahndle something with dom, so keep this\n  // because \"editting\" or w/e cause of state, not \"reading\", inside the heder, have null for mSTP; info getting dispatched is w/e you enter \n  handleAddTodo = event => {\n    const { todos } = this.state;\n    let makeId = Math.floor(Math.random() * 333666999);\n    if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n      let newTodos = todos.slice(0); // copy curr arr and return new; can go back in time \n      let newlyEnteredTodo = {\n        userId: 1,\n        id: makeId,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newlyEnteredTodo);\n      this.setState({ todos: newTodos });\n      event.target.value = \"\";\n    };\n  };\n\n  // will lose these handlers b/c just data and not doing stuffon dom\n  handleDestroyOne = clickedTodoId => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === clickedTodoId) {\n        return false\n      }\n      return true;\n    });\n    this.setState({ todos: newTodos });\n  };\n\n  handleDestroyAllCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n  render() {\n    const { todos } = this.state;\n    const allHandlingProps = {\n      handleAddTodo: this.handleAddTodo,\n      handleDestroyOne: this.handleDestroyOne,\n      handleToggleCompletedTodo: this.handleToggleCompletedTodo,\n      handleDestroyAllCompletedTodos: this.handleDestroyAllCompletedTodos,\n      // completed: todos.filter(todo => !todo.completed).length\n    };\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\n// cut out all ofr the state stuff above b/c state will be handled by redux \n// this state is entire redux state\nconst mapStateToProps = (state) => {\n  return {\n\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n\n  }\n}\n\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n// export default App;","import { ADD_TODO, CLEAR_COMPLETED_TODOS, DELETE_TODO, TOGGLE_TODO } from \"../Actions/actions.js\";\nimport todoList from '../todos.json'; // this will get the collection of all the messages and can put in the inital state\n\nconst initialState = {\n    todoList\n};\n\nconst todosReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            // wont be an array because this has to deal with wha the initial sate already looks like \n            return [...state, action.todo];\n            break;\n        case CLEAR_COMPLETED_TODOS:\n            return [...state, action.todo];\n            break;\n        case DELETE_TODO:\n            return [...state, action.todo];\n            break;\n        case TOGGLE_TODO:\n            return [...state, action.todo];\n            break;\n        default:\n            return state;\n    }\n};\n\nexport default todosReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './Components/App';\nimport todosReducer from \"./Reducers/reducer.js\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nlet store = createStore(todosReducer);\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));\n// first param has to be component"],"sourceRoot":""}