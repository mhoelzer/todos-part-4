{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoList","state","todos","todoList","_this2","Fragment","placeholder","autoFocus","onKeyDown","handleAddTodo","map","todo","Components_TodoItem","key","id","NavLink","exact","to","activeClassName","handleDestroyAllCompletedTodos","App","clickedTodoId","event","newTodos","_this","setState","makeId","Math","floor","random","keyCode","slice","newlyEnteredTodo","userId","target","value","push","filter","allHandlingProps","length","Switch","Route","path","render","Components_TodoList","Object","assign","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.357e38bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\n// import queryString from \"query-string\";\nimport TodoItem from \"./TodoItem.js\";\nimport todoList from '../todos.json';\n\nclass TodoList extends Component {\n    state = {\n        todos: todoList\n    };    \n    render() {\n        const { todos } = this.props;\n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>todos</h1>\n                    <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onKeyDown={this.props.handleAddTodo} />\n                    {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n                </header>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.props.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.props.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                <footer className=\"footer\">\n                    {/* should be 0 default; change to {completed} */}\n                    <span className=\"todo-count\"><strong>{this.props.completed}</strong> item(s) left</span>\n                    <ul className=\"filters\">\n                    {/* if do NavLink, add in activeClassName=\"selected\" and add exact to each, or if have the switch, just put with / in route; or classname={filter === \"all\"?\"seected\":\"\"} */}\n                        <li><NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink></li>\n                        <li><NavLink exact to=\"/active\" activeClassName=\"selected\">Active</NavLink></li>\n                        <li><NavLink exact to=\"/completed\" activeClassName=\"selected\">Completed</NavLink></li>\n                    </ul>\n                    <button className=\"clear-completed\" onClick={this.props.handleDestroyAllCompletedTodos}>Clear completed</button>\n                </footer>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\nimport { Switch, Route } from \"react-router-dom\";\nimport todoList from '../todos.json';\n\nclass App extends Component {\n  state = {\n    todos: todoList\n  };\n\n  // function inside funciton; once called the first time, the first outer funxtion will run and implicitly returns inner function (the event handler); first param is event obj sent from dom; cTI can be accessed inside inner funct\n  handleToggleCompletedTodo = clickedTodoId => event => {\n    // map makes new array to get results in newtodos\n    const newTodos = this.state.todos.map(todo => {\n      // get todo id that matches one was clicked; if this is false, no run\n      if (todo.id === clickedTodoId) {\n        // change completed value/any boolean value (t vs f)\n        todo.completed = !todo.completed;\n      }\n      return todo; // have to return original todo obj\n    });\n    // overwrite todos w/ newtodos\n    this.setState({ todos: newTodos });\n  };\n\n  handleAddTodo = event => {\n    const { todos } = this.state;\n    let makeId = Math.floor(Math.random() * 333666999);\n    if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n      let newTodos = todos.slice(0); // copy curr arr and return new; can go back in time \n      let newlyEnteredTodo = {\n        userId: 1,\n        id: makeId,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newlyEnteredTodo);\n      this.setState({ todos: newTodos });\n      event.target.value = \"\";\n    };\n  };\n\n  handleDestroyOne = clickedTodoId => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === clickedTodoId) {\n        return false\n      }\n      return true;\n    });\n    this.setState({ todos: newTodos });\n  };\n\n  handleDestroyAllCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n  render() {\n    const { todos } = this.state;\n    const allHandlingProps = {\n      handleAddTodo: this.handleAddTodo,\n      handleDestroyOne: this.handleDestroyOne,\n      handleToggleCompletedTodo: this.handleToggleCompletedTodo,\n      handleDestroyAllCompletedTodos: this.handleDestroyAllCompletedTodos,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));\n// first param has to be component"],"sourceRoot":""}